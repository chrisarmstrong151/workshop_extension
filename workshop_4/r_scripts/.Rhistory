test <- read.table('~/Desktop/multiqc_fastqc.tsv', header = T)
test <- read.table('~/Desktop/multiqc_fastqc.tsv', header = TRUE, sep = '\t', stringsAsFactors = FALSE)
test
library(data.table)
setDT(test)
test
server <- read.table('~/Desktop/workspace/um/server.tsv', sep = '\t', header = FALSE, stringsAsFactors = FALSE)
local <- read.table('~/Desktop/workspace/um/local.tsv', sep = '\t', header = FALSE, stringsAsFactors = FALSE)
library(data.table)
setDT(server)
setDT(local)
server
local
names(server) <- c('size', 'filename')
names(local) <- c('size', 'filename')
server
local
table(c(server$filename, local$filename))
server[local, on = 'filename']
joined <- server[local, on = 'filename']
joined
names(table(joined$filename))
test <- data.table(filename = names(table(joined$filename)), count = as.vector(table(joined$filename)))
test
test[order(test$count)]
test[-order(test$count)]
test[order(-test$count)]
test[order(-test$count)][count > 1, ]
server
length(unique(server$filename))
length(unique(local$filename))
length(local$filename)
joined
joined[size != i.size, ]
test[order(-test$count)][count > 1, ]
intersect(joined[size != i.size, filename], test[order(-test$count)][count > 1, filename])
server
server_duplicates <- data.frame(filename = names(table(server$filename)), count = as.vector(table(server$filename)))
server_duplicates
server_duplicates[count > 1, ]
server_duplicates
clear
setDT(server_duplicates)
server_duplicates[count > 1, ]
server
server_duplicates <- server_duplicates[count > 1, ]
server
server_duplicates
server_duplicates[server, on = 'filename']
server[server_duplicates, on = 'filename']
server
server_duplicates
server[server_duplicates, on = 'filename']
server[server_duplicates, on = 'filename'][, .N, by = c(filename, size)]
server[server_duplicates, on = 'filename'][, .N, by = c("filename", "size")]
server[server_duplicates, on = 'filename'][, .N, by = c("filename", "size")][N > 1, ]
history
history()
savehistory("~/Desktop/server_file_issues.txt")
server <- read.table('~/Desktop/workspace/um/server.tsv', sep = '\t', header = FALSE, stringsAsFactors = FALSE)
server
local <- read.table('~/Desktop/workspace/um/local.tsv', sep = '\t', header = FALSE, stringsAsFactors = FALSE)
library(data.table)
setDT(server)
setDT(local)
names(server) <- c('size', 'filename')
names(local) <- c('size', 'filename')
server
local
server
local
length(unique(local$filename))
server[local, on = 'filename']
local[server, on = 'filename']
length(unique(server$filename))
local[server, on = 'filename'][size != i.size, ]
server[local, on = 'filename'][size != i.size, ]
local[!server, on = 'filename']
server[!local, on = 'filename']
?data.table
local
server
?intersection
setdiff(local$filename, server$filename)
setdiff(server$filename, local$filename)
# Check that the server batches went correctly.
library(data.table)
# Get the server and local filenames and sizes.
server <- read.table('~/Desktop/workspace/um/server.tsv', sep = '\t', header = FALSE, stringsAsFactors = FALSE)
local <- read.table('~/Desktop/workspace/um/local.tsv', sep = '\t', header = FALSE, stringsAsFactors = FALSE)
server
# Check that the server batches went correctly.
library(data.table)
# Get the server and local filenames and sizes.
server <- setDT(read.table('~/Desktop/workspace/um/server.tsv', sep = '\t', header = FALSE, stringsAsFactors = FALSE))
local <- setDT(read.table('~/Desktop/workspace/um/local.tsv', sep = '\t', header = FALSE, stringsAsFactors = FALSE))
server
# Check that the server batches went correctly.
library(data.table)
# Get the server and local filenames and sizes.
server <- setDT(read.table('~/Desktop/workspace/um/server.tsv', sep = '\t', header = FALSE, stringsAsFactors = FALSE))
local <- setDT(read.table('~/Desktop/workspace/um/local.tsv', sep = '\t', header = FALSE, stringsAsFactors = FALSE))
names(server) <- c('size', 'filename')
names(local) <- c('size', 'filename')
server
local
server[, .N, by = filename]
server[, .N, by = filename][N > 1, ]
local_filename_repeats <- local[, .N, by = filename][N > 1, ]
server
local
setequal(server$filename, local$filename)
setequal(server$filename, local$filename)
local[server, on = 'filename']
local[server, on = 'filename'][size != i.size, ]
server[local, on = 'filename'][size != i.size, ]
local[server, on = 'filename'][size != i.size, ]
server[local, on = 'filename'][size != i.size, ]
clear
local[server, on = 'filename'][size != i.size, ]
server[local, on = 'filename'][size != i.size, ]
local[server, on = 'filename'][size != i.size, ][sort(filename), ]
local[server, on = 'filename'][size != i.size, ][order(filename), ]
local[server, on = 'filename'][size != i.size, ][order(filename), ]
server[local, on = 'filename'][size != i.size, ][order(filename), ]
# Check that the server batches went correctly.
library(data.table)
# Get the server and local filenames and sizes.
server <- setDT(read.table('~/Desktop/workspace/um/server.tsv', sep = '\t', header = FALSE, stringsAsFactors = FALSE))
local <- setDT(read.table('~/Desktop/workspace/um/local.tsv', sep = '\t', header = FALSE, stringsAsFactors = FALSE))
names(server) <- c('size', 'filename')
names(local) <- c('size', 'filename')
# Are any files repeated?
server_filename_repeats <- server[, .N, by = filename][N > 1, ]
local_filename_repeats <- local[, .N, by = filename][N > 1, ]
server_filename_repeats
server_filename_repeats$filename
server_filename_repeats
server[filename %in% server_filename_repeats$filename, ]
local[filename %in% local_filename_repeats$filename, ]
server[filename %in% server_filename_repeats$filename, ][, .N, by = 'size']
server[filename %in% server_filename_repeats$filename, ][, .N, by = c('filename', 'size')]
local[filename %in% local_filename_repeats$filename, ]
server[filename %in% server_filename_repeats$filename, ]
server[filename %in% server_filename_repeats$filename, ][, .N, by = c('filename', 'size')]
server[, .N, by = c('filename', 'size')]
server[filename %in% server_filename_repeats$filename, ][, .N, by = c('filename', 'size')]
server[filename %in% server_filename_repeats$filename, ][, .N, by = c('filename', 'size')][N < 2, ]
server[filename %in% server_filename_repeats$filename, ][, .N, by = c('filename', 'size')]
server[filename %in% server_filename_repeats$filename, ][, .N, by = c('filename', 'size')][, .N, by = c('filename', 'N')]
server[filename %in% server_filename_repeats$filename, ][, .N, by = c('filename', 'size')]
server[filename %in% server_filename_repeats$filename, ]
server[filename %in% server_filename_repeats$filename, ][, .N, by = c('filename', 'size')]
server[filename %in% server_filename_repeats$filename, ][, .N, by = c('filename', 'size')][, .N, by = c('filename')]
server[filename %in% server_filename_repeats$filename, ][, .N, by = c('filename', 'size')][, .N, by = c('filename')][N > 1, ]
server_filename_repeats
server[filename %in% server_filename_repeats$filename, ][, .N, by = c('filename', 'size')][, .N, by = c('filename')][N > 1, ]
local[filename %in% local_filename_repeats$filename, ][, .N, by = c('filename', 'size')][, .N, by = c('filename')][N > 1, ]
server[filename %in% server_filename_repeats$filename, ]
server[!(filename %in% server_filename_repeats$filename), ]
# For files that are repeated, are the sizes different?
server_filename_repeats_sizes <- server[filename %in% server_filename_repeats$filename, ][, .N, by = c('filename', 'size')][, .N, by = c('filename')][N > 1, ]
local_filename_repeats_sizes <- local[filename %in% local_filename_repeats$filename, ][, .N, by = c('filename', 'size')][, .N, by = c('filename')][N > 1, ]
server_filename_repeats_sizes
local[server[!(filename %in% server_filename_repeats_sizes$filename), ], on = 'filename'][size != i.size, ][order(filename), ]
local[server[!(filename %in% server_filename_repeats_sizes$filename), ], on = 'filename'][size != i.size, ][order(filename), ]
server[!(filename %in% server_filename_repeats_sizes$filename), ][local, on = 'filename'][size != i.size, ][order(filename), ]
server[!(filename %in% server_filename_repeats_sizes$filename), ][local, on = 'filename'][size != i.size, ][order(filename), ]
# Check that the server batches went correctly.
library(data.table)
# Get the server and local filenames and sizes.
server <- setDT(read.table('~/Desktop/workspace/um/server.tsv', sep = '\t', header = FALSE, stringsAsFactors = FALSE))
local <- setDT(read.table('~/Desktop/workspace/um/local.tsv', sep = '\t', header = FALSE, stringsAsFactors = FALSE))
names(server) <- c('size', 'filename')
names(local) <- c('size', 'filename')
# Are the sets of files on the server and local the same?
setequal(server$filename, local$filename)
server_filename_repeats <- server[, .N, by = filename][N > 1, ]
server_filename_repeats
server_filename_repeats_sizes <- server[filename %in% server_filename_repeats$filename, ][, .N, by = c('filename', 'size')][, .N, by = c('filename')][N > 1, ]
server_filename_repeats_sizes
?mapply
install.packages("languageserver")
setwd('/home/aeros/Desktop/workspace/pib706/workshop_extension/workshop_3/r_scripts
')
setwd('/home/aeros/Desktop/workspace/pib706/workshop_extension/workshop_3/r_scripts')
dir()
test <- read.table(file = 'R_lines.csv', sep = ',', stringsAsFactors = FALSE)
test
test <- read.table(file = 'R_lines.csv', sep = ',', stringsAsFactors = FALSE, header = TRUE)
test
plot(test$x, test$y)
plot(test$y, test$x)
plot(test$y, rev(test$x))
dev.off()
plot(test$y, rev(test$x))
plot(test$y, test$x)
plot(test$x, test$y)
plot(test$y, test$x)
plot(test$y, rev(test$x))
rev(test$x)
?rev
plot(test$y, test$x)
plot(test$x, test$y)
savehistory("~/Desktop/workspace/pib706/workshop_extension/workshop_3/r_scripts/test.Rhistory")
# Set the working directory
setwd('/home/aeros/Desktop/workspace/pib706/workshop_extension/workshop_3/r_scripts')
# Load the data
loaded <- read.table(file = 'R_lines.csv', sep = ',', stringsAsFactors = FALSE, header = TRUE)
# SLOW
# Create a matrix from the image data.
# Note that the image will be clipped to the most extremal signal pixels.
loaded
matrix(data = loaded)
matrix(data = loaded, byrow = TRUE)
loaded
?matrix
# Set the working directory
setwd('/home/aeros/Desktop/workspace/pib706/workshop_extension/workshop_3/r_scripts')
# Load the data
loaded <- read.table(file = 'R_lines.csv', sep = ',', stringsAsFactors = FALSE, header = TRUE)
# SLOW
# Create a matrix from the image data.
image_matrix <- matrix(
nrow = max(loaded$x),
ncol = max(loaded$y)
)
# Note that the image will be clipped to the most extremal signal pixels.
for(i in seq(1, nrow(loaded))) {
image_matrix[loaded[i, c('x')], loaded[i, c('y')]]
}
image_matrix
nrow(image_matrix)
ncol(image_matrix)
plot(image_matrix)
library(plot.matrix)
install.packages('plot.matrix')
library(plot.matrix)
plot(image_matrix)
plot(c(image_matrix))
detach("package:plot.matrix", unload = TRUE)
plot(c(image_matrix))
image_matrix
# Set the working directory
setwd('/home/aeros/Desktop/workspace/pib706/workshop_extension/workshop_3/r_scripts')
# Load the data
loaded <- read.table(file = 'R_lines.csv', sep = ',', stringsAsFactors = FALSE, header = TRUE)
# SLOW
# Create a matrix from the image data.
image_matrix <- matrix(
data = 0
nrow = max(loaded$x),
ncol = max(loaded$y)
)
# Note that the image will be clipped to the most extremal signal pixels.
for(i in seq(1, nrow(loaded))) {
image_matrix[loaded[i, c('x')], loaded[i, c('y')]]
}
# Set the working directory
setwd('/home/aeros/Desktop/workspace/pib706/workshop_extension/workshop_3/r_scripts')
# Load the data
loaded <- read.table(file = 'R_lines.csv', sep = ',', stringsAsFactors = FALSE, header = TRUE)
# SLOW
# Create a matrix from the image data.
image_matrix <- matrix(
data = 0,
nrow = max(loaded$x),
ncol = max(loaded$y)
)
# Note that the image will be clipped to the most extremal signal pixels.
for(i in seq(1, nrow(loaded))) {
image_matrix[loaded[i, c('x')], loaded[i, c('y')]]
}
image_matrix
plot(image_matrix)
plot(c(image_matrix))
# Transpose the matrix.
image_matrix <- t(image_matrix)
image_matrix
test <- lappy(seq(1, nrow(image_matrix)), function(row_number) {
lapply(seq(1, ncol(image_number)), function(col_number) {
if(image_matrix[row_number, col_number] != 0) {
data.frame(
x = row_number,
y = col_number
)
}
})
})
test <- lapply(seq(1, nrow(image_matrix)), function(row_number) {
lapply(seq(1, ncol(image_number)), function(col_number) {
if(image_matrix[row_number, col_number] != 0) {
data.frame(
x = row_number,
y = col_number
)
}
})
})
# Now re-create the plottable dataframe.
test <- lapply(seq(1, nrow(image_matrix)), function(row_number) {
lapply(seq(1, ncol(image_matrix)), function(col_number) {
if(image_matrix[row_number, col_number] != 0) {
data.frame(
x = row_number,
y = col_number
)
}
})
})
test
# Unlist.
unlisted <- unlist(test, recursive = FALSE)
unlisted
test[sapply(test, is.null)] <- NULL
test
# Unlist.
unlisted <- unlist(test, recursive = FALSE)
unlisted[sapply(unlisted, is.null)] <- NULL
unlisted
